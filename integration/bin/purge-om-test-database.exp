#    This file is part of OneModel, a program to manage knowledge.
#    Copyright in each year of 2016-2018 inclusive, Luke A Call; all rights reserved.
#    OneModel is free software, distributed under a license that includes honesty, the Golden Rule, guidelines around binary
#    distribution, and the GNU Affero General Public License as published by the Free Software Foundation;
#    see the file LICENSE for license version and details.
#    OneModel is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
#    You should have received a copy of the GNU Affero General Public License along with OneModel.  If
#    not, see http://www.gnu.org/licenses/  .

# NOTE: this is run by expect, NOT dejagnu calling expect, so features of dejagnu itself are absent.

set timeout 5
set test_name "OneModel startup"
set test_user "t1"
set test_pass "x"

# diagnostics?:
# (set next line to 0 to turn off)
#exp_internal 1
# (set next line higher to trace deeper into expect)
#strace 1

# (The other "launch" commands are exec and system)
# (diagnostics added to commented next line)
#spawn psql --echo-all --echo-queries -f ${script_dir}/purge-om-test-database.psql --username=${test_user} --password --dbname=om_${test_user}
spawn psql -f ${script_dir}/purge-om-test-database.psql --username=${test_user} --password --dbname=om_${test_user}

#set expectation "Password for user ${test_user}:"
set expectation "Password:"
expect {
  # per "man expect", the "default" keyword matches on either "timeout" or "eof" so we don't have to specify both:
  default {
    #using error instead of "exit 1", to generate a tcl stack trace:
    error "Got an error looking for \"${expectation}\}."
  }
  $expectation
}

send "${test_pass}\n"

set expectation "Did not find any relations."
expect {
  default {
    #using error instead of "exit 1", to generate a tcl stack trace:
    error "Got an error looking for \"${expectation}\}."
  }
  $expectation
}
wait

# diagnostics?
#send_user "\nDone with purge-om-test-database.exp: its last output was:\n$expect_out(buffer) \n"
