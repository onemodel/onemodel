------------------------
This file is part of OneModel, a program to manage knowledge.
Copyright in each year of 2016-2018 inclusive and 2020, Luke A. Call; all rights reserved.
OneModel is free software, distributed under a license that includes honesty, the Golden Rule, guidelines around binary
distribution, and the GNU Affero General Public License as published by the Free Software Foundation;
see the file LICENSE for license version and details.
OneModel is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
You should have received a copy of the GNU Affero General Public License along with OneModel.  If
not, see http://www.gnu.org/licenses/  .
------------------------

This directory is for dejagnu (expect) tests, mainly intended for testing the Text UI / controller / menu features that did not seem to lend themselves to testing with testNG as easily as other classes did.

To run these tests, you can install dejagnu, cd into the testsuite directory,
and run the program runtest (from dejagnu), or the convenience
script in the om project's integration/bin/om-expect-tests (or its convenience helper, oet).  They are also run automatically by "mvn verify" (the failsafe plugin), by EntityMenuIT.java and probably others.

To run dejagnu tests in debug mode (to hit breakpoints in the IDE, for example), see at the top of first.exp, the comments around the variable "using_debugger".

For other convenience during development, see the next 2 variables immediately after that.

For seeing why "mvn verify" fails, see the output of course, but then see what happens when you run
the tests using the script integration/bin/oet , because that shows test log files with some details.
Looking inside that script can give more insight.  You also might have to change the 1st line of
integration/bin/om-expect-tests AND integration/bin/purge-om-test-database to give a valid path to 
bash for your platform (portability suggestions welcome.  Update: should be
fixed to not matter, now).

To reproduce dejagnu test problems in debug mode, you can call OM like:
  "om d x"
or
  "c d x"
...depending on which version of the variables is used at the top of the first.exp file.  See that file, and the ../core/bin/c and om scripts, for details.  Then when OM launches you can enter the test username and password (per the postgresql installation details you have probably already used, but as of 2017-7-31 the test user is "t1" and password is "x" (without quotes).  Then you can attach with a java debugger.  (As of 2017-7-31 it sometimes takes more than one run to get through all the breakpoints--failing with an expect error then getting beyond it the next time; I don't yet know why.).

More info on dejagnu etc for these tests is at:
  man dejagnu
  http://www.embecosm.com/appnotes/ean8/ean8-howto-dejagnu-1.0.html
  https://www.gnu.org/software/dejagnu/
  maybe:  http://www.scarpaz.com/Documents/dejagnu.pdf
  maybe examples in the source code, in
    https://sourceforge.net/projects/dejahelp/files/dejahelp/0.1/

  man expect
  https://www.amazon.com/Exploring-Expect-Tcl-based-Automating-Interactive/dp/1565920902
  https://en.wikipedia.org/wiki/Expect
  http://www.cotse.com/dlf/man/expect/bulletproof1.htm

  www.tcl.tk
  https://en.wikipedia.org/wiki/Tcllib

  ...and of course searching.

